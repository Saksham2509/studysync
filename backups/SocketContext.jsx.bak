import React, { createContext, useContext, useEffect, useState, useCallback } from "react";
import { io } from "socket.io-client";
import { useAuth } from "./AuthContext";

// Create the Socket context
export const SocketContext = createContext(null);

// Custom hook for easy access
export const useSocket = () => useContext(SocketContext);

// Provider component
export const SocketProvider = ({ children }) => {
  const [socket, setSocket] = useState(null);
  const { getUserInfo } = useAuth();
  
  const initSocket = useCallback(() => {
    const token = localStorage.getItem("token");
    console.log("SocketContext: Initializing socket with token", token ? "present" : "absent");
    
    // Try to connect with error handling
    let newSocket;
    
    try {
      console.log("SocketContext: Attempting to connect to Socket.IO server...");
      
      // Create new socket connection
      newSocket = io("http://localhost:5000", {
        withCredentials: true,
        auth: { token }, // Send token for auth
        reconnectionAttempts: 10,
        reconnectionDelay: 1000,
        timeout: 10000, // Increase timeout
        transports: ['websocket', 'polling'], // Try both transports
      });

      // Connection debugging
      newSocket.on('connect', () => {
        console.log('SocketContext: Socket connected successfully:', newSocket.id);
      });
      
      newSocket.on('connect_error', (err) => {
        console.error('SocketContext: Socket connection error:', err.message);
      });
      
      newSocket.on('disconnect', (reason) => {
        console.log('SocketContext: Socket disconnected:', reason);
        
        // If server disconnected us, try to reconnect
        if (reason === 'io server disconnect') {
          console.log('SocketContext: Server disconnected socket, trying to reconnect');
          newSocket.connect();
        }
      });
      
      // Handle authentication errors
      newSocket.on('auth_error', (message) => {
        console.error('SocketContext: Authentication error:', message);
      });
      
      // Set socket in state only if we successfully created it
      setSocket(newSocket);
      return newSocket;
    } catch (err) {
      console.error("SocketContext: Failed to initialize socket:", err);
      return null;
    }
  }, []);

  // Listen for token changes and reconnect socket if needed
  useEffect(() => {
    const userInfo = getUserInfo();
    console.log("SocketContext: User auth state changed:", userInfo.isAuthenticated);
    
    let socketInstance = socket;
    
    // If we have no socket but user is authenticated, create one
    if (!socketInstance && userInfo.isAuthenticated) {
      socketInstance = initSocket();
    }
    
    // If user logs out, disconnect socket
    if (!userInfo.isAuthenticated && socketInstance) {
      console.log("SocketContext: User logged out, disconnecting socket");
      socketInstance.disconnect();
      setSocket(null);
    }
    
    return () => {
      if (socketInstance) {
        console.log("SocketContext: Cleaning up socket connection");
        socketInstance.disconnect();
      }
    };
  }, [getUserInfo, initSocket]);

  return (
    <SocketContext.Provider value={socket}>
      {children}
    </SocketContext.Provider>
  );
};
