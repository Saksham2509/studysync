import React, { createContext, useContext, useState, useEffect } from 'react';
import axios from '../utils/axios';
import { jwtDecode } from 'jwt-decode';

const AuthContext = createContext();

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [refreshTrigger, setRefreshTrigger] = useState(0);

  useEffect(() => {
    const loadUser = async () => {
      try {
        const token = localStorage.getItem('token');
        
        if (!token) {
          setLoading(false);
          return;
        }
        
        try {
          // Decode the token to get user info
          const decoded = jwtDecode(token);
          
          try {
            // Verify with server that token is still valid
            const res = await axios.get('/api/auth/me', {
              headers: { Authorization: `Bearer ${token}` }
            });
            
            setUser({
              ...res.data,
              id: decoded.user?.id || res.data._id,
              name: decoded.user?.name || res.data.name,
              token
            });
          } catch (apiErr) {
            console.log('API verification unavailable, using decoded token only:', apiErr.message);
            
            // If the API endpoint isn't available, still use the decoded token
            setUser({
              id: decoded.user?.id,
              name: decoded.user?.name || 'User',
              email: decoded.user?.email,
              token
            });
          }
          
        } catch (err) {
          console.error('Token verification error:', err);
          localStorage.removeItem('token');
        }
      } catch (err) {
        setError('Failed to load user data');
        console.error('Auth error:', err);
      } finally {
        setLoading(false);
      }
    };

    loadUser();
  }, [refreshTrigger]);

  // Check if the token has expired
  const isTokenValid = () => {
    const token = localStorage.getItem('token');
    if (!token) return false;
    
    try {
      const decoded = jwtDecode(token);
      return decoded.exp > Date.now() / 1000;
    } catch (err) {
      return false;
    }
  };

  const logout = () => {
    localStorage.removeItem('token');
    setUser(null);
    setRefreshTrigger(prev => prev + 1);
  };
  
  const refreshAuth = () => {
    setRefreshTrigger(prev => prev + 1);
  };

  const getUserInfo = () => {
    if (!user) {
      const token = localStorage.getItem('token');
      if (token) {
        try {
          const decoded = jwtDecode(token);
          return {
            id: decoded.user?.id,
            email: decoded.user?.email,
            name: decoded.user?.name || 'Anonymous User',
            isAuthenticated: true
          };
        } catch (err) {
          return { name: 'Anonymous User', isAuthenticated: false };
        }
      }
      return { name: 'Anonymous User', isAuthenticated: false };
    }
    return { ...user, isAuthenticated: true };
  };

  return (
    <AuthContext.Provider 
      value={{ 
        user, 
        loading, 
        error, 
        isAuthenticated: !!user, 
        isTokenValid,
        getUserInfo,
        logout,
        refreshAuth
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export default AuthContext;
              token
            });
          }
          
        } catch (err) {
          console.error('AuthContext: Token verification error:', err);
          localStorage.removeItem('token');
        }
      } catch (err) {
        setError('Failed to load user data');
        console.error('AuthContext: Auth error:', err);
      } finally {
        setLoading(false);
      }
    };

    loadUser();
  }, [refreshTrigger]);

  // Check if the token has expired
  const isTokenValid = () => {
    const token = localStorage.getItem('token');
    if (!token) return false;
    
    try {
      const decoded = jwtDecode(token);
      return decoded.exp > Date.now() / 1000;
    } catch (err) {
      return false;
    }
  };

  const logout = () => {
    localStorage.removeItem('token');
    setUser(null);
    setRefreshTrigger(prev => prev + 1);
  };
  
  const refreshAuth = () => {
    console.log("AuthContext: Refreshing auth state");
    setRefreshTrigger(prev => prev + 1);
  };

  const getUserInfo = () => {
    if (!user) {
      const token = localStorage.getItem('token');
      if (token) {
        try {
          const decoded = jwtDecode(token);
          return {
            id: decoded.user?.id,
            email: decoded.user?.email,
            name: decoded.user?.name || 'Anonymous User',
            isAuthenticated: true
          };
        } catch (err) {
          console.error("AuthContext: Error decoding token in getUserInfo", err);
          return { name: 'Anonymous User', isAuthenticated: false };
        }
      }
      return { name: 'Anonymous User', isAuthenticated: false };
    }
    return { ...user, isAuthenticated: true };
  };

  return (
    <AuthContext.Provider 
      value={{ 
        user, 
        loading, 
        error, 
        isAuthenticated: !!user, 
        isTokenValid,
        getUserInfo,
        logout,
        refreshAuth
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export default AuthContext;
