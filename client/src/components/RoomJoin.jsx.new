import React, { useState, useEffect } from "react";
import { useSocket } from "../contexts/SocketContext";

// RoomJoin emits 'joinRoom' with room only (user from JWT)
const RoomJoin = ({ setRoom, setIsHost, setUserName }) => {
  const [roomInput, setRoomInput] = useState("");
  const [nameInput, setNameInput] = useState("");
  const [host, setHost] = useState(false);
  const [error, setError] = useState("");
  const socket = useSocket();

  useEffect(() => {
    if (!socket) return;
    const handleDenied = (data) => {
      setError(data.reason || "Access denied");
    };
    socket.on("joinDenied", handleDenied);
    return () => socket.off("joinDenied", handleDenied);
  }, [socket]);

  const handleJoin = (e) => {
    e.preventDefault();
    setError("");
    
    // Handle case where socket isn't available
    if (!socket) {
      setError("Server connection not available. Please refresh the page.");
      return;
    }
    
    if (!roomInput || !nameInput) {
      setError("Please enter both your name and a room name.");
      return;
    }
    
    // Check socket connection
    if (!socket.connected) {
      console.log("Socket reconnecting...");
      try {
        socket.connect();
        setError("Reconnecting to server... Please try again in a moment.");
      } catch (err) {
        console.error("Reconnection failed:", err);
        setError("Could not connect to server. Please check if the server is running.");
      }
      return;
    }
    
    setRoom(roomInput);
    setUserName(nameInput);
    setIsHost(host);
    
    // Send both room and userName for backward compatibility
    try {
      socket.emit("joinRoom", { room: roomInput, userName: nameInput });
      console.log("Emitted joinRoom event:", { room: roomInput, userName: nameInput });
    } catch (err) {
      console.error("Error emitting join event:", err);
      setError("Failed to join room. Please try again.");
    }
  };

  return (
    <div>
      <form className="flex flex-col gap-2 max-w-xs mx-auto mt-10" onSubmit={handleJoin}>
        <h2 className="text-xl font-bold text-center mb-3">Join a Study Room</h2>
        {!socket && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            <p className="font-bold">Server Connection Error</p>
            <p className="text-sm">Could not connect to the StudySync server at http://localhost:5000.</p>
            <p className="text-sm mt-1">Please make sure the server is running and refresh this page.</p>
          </div>
        )}
        <input
          className="border p-2 rounded"
          placeholder="Your Name"
          value={nameInput}
          onChange={e => setNameInput(e.target.value)}
        />
        <input
          className="border p-2 rounded"
          placeholder="Room Name"
          value={roomInput}
          onChange={e => setRoomInput(e.target.value)}
        />
        <label className="flex items-center gap-2">
          <input type="checkbox" checked={host} onChange={e => setHost(e.target.checked)} />
          Join as Host
        </label>
        {error && <div className="text-red-500 text-sm">{error}</div>}
        {socket?.connected === false && !error && (
          <div className="text-yellow-500 text-sm">Connecting to server...</div>
        )}
        <button className="bg-blue-500 text-white p-2 rounded hover:bg-blue-600" type="submit" disabled={!socket}>
          {socket ? "Join Room" : "Connecting..."}
        </button>
      </form>
    </div>
  );
};

export default RoomJoin;
